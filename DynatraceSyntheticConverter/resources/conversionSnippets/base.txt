'''yml
requestHeader:
  Custom-Header-AppD: "AppDSynthetic"
'''
import logging
import re
import time
import unittest
from datetime import datetime, timedelta

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support.wait import WebDriverWait


class AppDynamicsJob(unittest.TestCase):
    def test_app_dynamics_job(self):
# $EVENT_STEPS

    def setUp(self):
        # Driver defined here is unused by AppDynamics synthetics, for local testing only.
        self.driver = webdriver.Chrome()
        # Variables defined below are used by AppDynamics synthetics.
        # Dynatrace timeout default for finding elements is 1 minute.
        self.time_to_wait = 60
        self.driver.implicitly_wait(self.time_to_wait)
        self.driver_wait = WebDriverWait(self.driver, self.time_to_wait)

    ##### Helper Functions - Actions #####

    def _get_url(self, description: str, url: str):
        logging.info(description)
        self.driver.get(url)

    def _click(self, description: str, selector_type: By, selector_string: str):
        logging.info(description)
        self.driver_wait.until(expected_conditions.visibility_of_element_located((selector_type, selector_string)))
        element = self.driver.find_element(selector_type, selector_string)
        self.driver.execute_script("arguments[0].scrollIntoView();", element)
        self.driver.execute_script("arguments[0].click();", element)
        return element

    def _send_keys(self, description: str, selector_type: By, selector_string: str, keys: str):
        element = self._click(description, selector_type, selector_string)
        self.driver.execute_script("arguments[0].innerHTML = \"\";", element)
        element.send_keys(keys)

    def _select_option(self, description: str, selector_type: By, selector_string: str, index: int):
        element = self._click(description, selector_type, selector_string)
        Select(element).select_by_index(index)

    ##### Helper Functions - Validators #####

    def _is_string_in_element(self, needle: str, selector_type: By, selector_string: str):
        self.driver_wait.until(expected_conditions.visibility_of_element_located((selector_type, selector_string)))

        start_time = datetime.now()
        max_timeout_reached = False
        found_needle = False
        while not max_timeout_reached and not found_needle:
            text = self.driver.find_element_by_tag_name(selector_string).text.lower()
            found_needle = re.search(needle.lower(), text) is not None
            elapsed = datetime.now() - start_time
            if elapsed > timedelta(seconds=self.time_to_wait):
                max_timeout_reached = True
            else:
                time.sleep(1)
        return found_needle

    def _verify_string_in_page(self, needle: str):
        logging.info(f'Verifying {needle.lower()} is contained in the page.')
        self.assertTrue(self._is_string_in_element(needle, By.TAG_NAME, "body"))

    def _verify_string_not_in_page(self, needle: str):
        logging.info(f'Verifying {needle.lower()} is not contained in the page.')
        # TODO: need smart wait
        self.assertFalse(self._is_string_in_element(needle, By.TAG_NAME, "body"))

    def _verify_element_not_in_page(self, selector_type: By, selector_string: str):
        logging.info(f'Verifying "{selector_string}" does not exist.')
        # TODO: need smart wait
        element = self.driver.find_element(selector_type, selector_string) is not None
        self.assertIsNone(element)

    def _verify_element_in_page(self, selector_type: By, selector_string: str):
        logging.info(f'Verifying "{selector_string}" does not exist.')
        self.driver_wait.until(expected_conditions.visibility_of_element_located((selector_type, selector_string)))
        element = self.driver.find_element(selector_type, selector_string)
        self.assertIsNotNone(element)


if __name__ == "__main__":
    unittest.main()
